services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      # Use default values for OAuth environment variables to prevent blank strings
      - HUBSPOT_CLIENT_ID=${HUBSPOT_CLIENT_ID:-demo_hubspot_id}
      - HUBSPOT_CLIENT_SECRET=${HUBSPOT_CLIENT_SECRET:-demo_hubspot_secret}
      - HUBSPOT_REDIRECT_URI=${HUBSPOT_REDIRECT_URI:-http://localhost:8000/integrations/hubspot/oauth2callback}
      - AIRTABLE_CLIENT_ID=${AIRTABLE_CLIENT_ID:-demo_airtable_id}
      - AIRTABLE_CLIENT_SECRET=${AIRTABLE_CLIENT_SECRET:-demo_airtable_secret}
      - AIRTABLE_REDIRECT_URI=${AIRTABLE_REDIRECT_URI:-http://localhost:8000/integrations/airtable/oauth2callback}
      # Quote the scope value to handle spaces and special characters
      - AIRTABLE_SCOPE=${AIRTABLE_SCOPE:-"data.records:read data.records:write"}
      - NOTION_CLIENT_ID=${NOTION_CLIENT_ID:-demo_notion_id}
      - NOTION_CLIENT_SECRET=${NOTION_CLIENT_SECRET:-demo_notion_secret}
      - NOTION_REDIRECT_URI=${NOTION_REDIRECT_URI:-http://localhost:8000/integrations/notion/oauth2callback}
      - CACHE_EXPIRY=${CACHE_EXPIRY:-600}
    # Use env_file instead of directly injecting variables with special characters
    env_file:
      - ./.env
    depends_on:
      - redis
    volumes:
      - ./backend:/app
    networks:
      - integration-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_BASE_URL=${API_BASE_URL:-http://localhost:8000}
    restart: unless-stopped
    ports:
      - "3000:80"
    environment:
      - NODE_ENV=production
    depends_on:
      - backend
    networks:
      - integration-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  redis:
    image: redis:6.2-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    networks:
      - integration-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 3
      start_period: 5s

networks:
  integration-network:
    driver: bridge

volumes:
  redis-data:
